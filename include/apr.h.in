#ifndef APR_H
#define APR_H

/* So that we can use inline on some critical functions, and use
 * GNUC attributes (such as to get -Wall warnings for printf-like
 * functions).  Only do this in gcc 2.7 or later ... it may work
 * on earlier stuff, but why chance it.
 *
 * We've since discovered that the gcc shipped with NeXT systems
 * as "cc" is completely broken.  It claims to be __GNUC__ and so
 * on, but it doesn't implement half of the things that __GNUC__
 * means.  In particular it's missing inline and the __attribute__
 * stuff.  So we hack around it.  PR#1613. -djg
 */
#if !defined(__GNUC__) || __GNUC__ < 2 || \
    (__GNUC__ == 2 && __GNUC_MINOR__ < 7) ||\
    defined(NEXT)
#define apr_inline
#define __attribute__(__x)
#define ENUM_BITFIELD(e,n,w)  signed int n : w
#else
#define apr_inline __inline__
#define USE_GNU_INLINE
#define ENUM_BITFIELD(e,n,w)  e n : w
#endif

#define APR_HAVE_CTYPE_H        @ctypeh@
#define APR_HAVE_ERRNO_H        @errnoh@
#define APR_HAVE_DIRENT_H       @direnth@
#define APR_HAVE_FCNTL_H        @fcntlh@
#define APR_HAVE_NETINET_IN_H   @netinet_inh@
#define APR_HAVE_PTHREAD_H      @pthreadh@
#define APR_HAVE_STDARG_H       @stdargh@
#define APR_HAVE_STDIO_H        @stdioh@
#define APR_HAVE_SYS_SOCKET_H   @sys_socketh@
#define APR_HAVE_SYS_TYPES_H    @sys_typesh@
#define APR_HAVE_SYS_UIO_H      @sys_uioh@
#define APR_HAVE_SIGNAL_H       @signalh@
#define APR_HAVE_SYS_WAIT_H     @sys_waith@

#define APR_USE_FLOCK_SERIALIZE           @flockser@ 
#define APR_USE_SYSVSEM_SERIALIZE         @sysvser@
#define APR_USE_FCNTL_SERIALIZE           @fcntlser@
#define APR_USE_PROC_PTHREAD_SERIALIZE    @procpthreadser@ 
#define APR_USE_PTHREAD_SERIALIZE         @pthreadser@ 

#define APR_USES_ANONYMOUS_SHM            @anonymous_shm@
#define APR_USES_FILEBASED_SHM            @filebased_shm@
#define APR_USES_KEYBASED_SHM             @keybased_shm@

/* These look VERY similar to the macro's above.  They aren't.  The
 * difference is in implementation.  The above macros describe how to
 * access the shared memory, either anonymously, through a key or through
 * a file.  The macros defined below describe actually how the shared
 * memory is actually implemented.  Is it actually a file that has been
 * opened by multiple processes, or it is stored in memory somehow.  This
 * is important for some optimizations in Apache.
 */ 
#define APR_FILE_BASED_SHM      @file_based@
#define APR_MEM_BASED_SHM       @mem_based@

#define APR_HAVE_IN_ADDR        @have_in_addr@
#define APR_HAVE_INET_ADDR      @have_inet_addr@
#define APR_HAVE_INET_NETWORK   @have_inet_network@
#define APR_HAVE_UNION_SEMUN    @have_union_semun@
#define APR_HAVE_STRUCT_RLIMIT  @struct_rlimit@
#define APR_HAVE_SETRLIMIT      @have_setrlimit@
#define APR_HAVE_GETRLIMIT      @have_getrlimit@
#define APR_HAVE_STRICMP        @have_stricmp@
#define APR_HAVE_STRNICMP       @have_strnicmp@
#define APR_HAVE_STRCASECMP     @have_strcasecmp@
#define APR_HAVE_STRNCASECMP    @have_strncasecmp@
#define APR_HAVE_STRDUP         @have_strdup@
#define APR_HAVE_STRSTR         @have_strstr@
#define APR_HAVE_MEMMOVE        @have_memmove@
#define APR_HAVE_BZERO          @have_bzero@
#define APR_HAVE_IPV6           @have_sockaddr_in6@


#if APR_HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif

#if APR_HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif

/*  APR Feature Macros */
#define APR_HAS_SHARED_MEMORY     @sharedmem@
#define APR_HAS_THREADS           @threads@
#define APR_HAS_SENDFILE          @sendfile@
#define APR_HAS_MMAP              @mmap@
#define APR_HAS_FORK              @fork@
#define APR_HAS_RANDOM            @rand@
#define APR_HAS_XLATE             @iconv@
#define APR_HAS_OTHER_CHILD       @oc@
#define APR_HAS_DSO               @aprdso@
#define APR_HAS_UNICODE_FS        0

/* This macro tells APR that it is safe to make a file masquerade as a 
 * socket.  This is necessary, because some platforms support poll'ing
 * on pipes/files, while some don't.  APR only supports poll'ing on 
 * sockets to handle this inconsistensy.  However, it is often useful to
 * be able to poll on files/pipes on platforms that support it.  This
 * feature macro allows us to find those platforms and support the feature
 * where available.
 */
#define APR_FILES_AS_SOCKETS      @file_as_socket@

/* Typedefs that APR needs. */

typedef  @short_value@           apr_int16_t;
typedef  unsigned @short_value@  apr_uint16_t;
                                               
typedef  @int_value@             apr_int32_t;
typedef  unsigned @int_value@    apr_uint32_t;
                                               
typedef  @long_value@            apr_int64_t;
typedef  unsigned @long_value@   apr_uint64_t;

typedef  @size_t_value@          apr_size_t;
typedef  @ssize_t_value@         apr_ssize_t;
typedef  @off_t_value@           apr_off_t;
typedef  @socklen_t_value@       apr_socklen_t;

/* Definitions that APR programs need to work properly. */

#define APR_THREAD_FUNC

/**
 * APR_DECLARE_EXPORT is defined when building the APR dynamic library,
 * so that all public symbols are exported.
 *
 * APR_DECLARE_STATIC is defined when including the APR public headers,
 * to provide static linkage when the dynamic library may be unavailable.
 *
 * APR_DECLARE_STATIC and APR_DECLARE_EXPORT are left undefined when
 * including the APR public headers, to import and link the symbols from the 
 * dynamic APR library and assure appropriate indirection and calling 
 * conventions at compile time.
 */

/**
 * The public APR functions are declared with APR_DECLARE(), so they may
 * use the most appropriate calling convention.  Public APR functions with 
 * variable arguments must use APR_DECLARE_NONSTD().
 *
 * @deffunc APR_DECLARE(rettype) apr_func(args);
 */
#define APR_DECLARE(type)            type
/**
 * The public APR functions using variable arguments are declared with 
 * AP_DECLARE(), as they must use the C language calling convention.
 *
 * @deffunc APR_DECLARE_NONSTD(rettype) apr_func(args, ...);
 */
#define APR_DECLARE_NONSTD(type)     type
/**
 * The public APR variables are declared with AP_MODULE_DECLARE_DATA.
 * This assures the appropriate indirection is invoked at compile time.
 *
 * @deffunc APR_DECLARE_DATA type apr_variable;
 * @tip extern APR_DECLARE_DATA type apr_variable; syntax is required for
 * declarations within headers to properly import the variable.
 */
#define APR_DECLARE_DATA

/* Define APR_SSIZE_T_FMT.  
 * If ssize_t is an integer we define it to be "d",
 * if ssize_t is a long int we define it to be "ld",
 * if ssize_t is neither we declare an error here.
 * I looked for a better way to define this here, but couldn't find one, so
 * to find the logic for this definition search for "ssize_t_fmt" in
 * configure.in.
 */
@ssize_t_fmt@

/* And APR_OFF_T_FMT */
@off_t_fmt@

/* Local machine definition for console and log output. */
#define APR_EOL_STR              "@eolstr@"

/* Define apr_signal and related necessary definitions.
 */
/* We are checking for HAVE_SIGACTION, but autoconf is filling this in 
 * for us automatically.
 */
#if @have_sigaction@ && !defined(NO_USE_SIGACTION)
typedef void Sigfunc(int);
Sigfunc *apr_signal(int signo, Sigfunc * func);

#if defined(SIG_ING) && !defined(SIG_ERR)
#define SIG_ERR ((Sigfunc *)-1)
#endif
#else
#define apr_signal(a,b) signal(a,b)
#endif

#ifdef APR_HAVE_SYS_WAIT_H

/* We have a POSIX wait interface */
#include <sys/wait.h>

#ifdef WEXITSTATUS
#define apr_wait_t       int
#else
/* We don't have a POSIX wait interface. Assume we have the old-style. Is this
 * a bad assumption? */
/* Yessiree bob, it was... but will this work instead? */
#define apr_wait_t       union wait
#define WEXITSTATUS(status)    (int)((status).w_retcode)
#define WTERMSIG(status)       (int)((status).w_termsig)
#endif /* !WEXITSTATUS */
#endif /* HAVE_SYS_WAIT_H */

#endif /* APR_H */
